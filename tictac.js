/* This is a Simon's says game based on FreeCodeCamp's requirements 
for more info, please visit https://www.freecodecamp.org/challenges/build-a-tic-tac-toe-game */
//this version of the game does not contain an AI, it simply chooses a random move
//execute .ready function to set lexical scope
$(document).ready( function(){

var mark; //holds the player's mark(var times || o)
var times = '<i class="fa fa-times tile-times" aria-hidden="true" ></i>'; //html for X mark
var o = '<i class="fa fa-circle-o tile-circle" aria-hidden="true" ></i>'; //html for O mark
var pcMark; //holds the mark for the PC
var turn; //designates whose turn it is (0 = pc, 1 = human)
var currentState = []; //show the current state of the board (-1 indicates o, 1 indicates x, 0 indicates empty)
var pcIsX; //if PC is x this variable is true otherwise false (designates who starts when game is restarted)
var result = 0; //stores the result generated by winState(checks if wthere is a winner)


$(".mark-times").click(function(){
	if(mark==undefined){
		mark = times;
		pcMark = o;
		pcIsX = false;
		turn = 0; // x always starts
		moveDiv();
	}
})

$(".mark-o").click(function(){
	if(mark==undefined){
		mark = o;
		pcMark = times;
		pcIsX = true;
		turn = 1;//x always starts
		moveDiv();
		pcMove();
	}
})

function moveDiv(){

	var div = $(".choose");
	div.animate({left:"400px",opacity:"0"});
}


$(".tile").click(function(){

	if($(this).html() == false && mark != undefined && turn == 0){
		$(this).html(mark);
		winState();
		checkDraw();
		turn = 1;
		pcMove();
	}

	});




function getCurrentState(){

	var currentDivs = document.getElementsByClassName("tile");
	currentState = [];
	for(var itr = 0; itr< 9; itr++){
		if(currentDivs[itr].outerHTML.indexOf("times")!=-1){
			currentState.push(1);
		} else if (currentDivs[itr].outerHTML.indexOf("fa-circle-o") != -1){
			currentState.push(-1);
		} else {
			currentState.push(0);
		}
	}
}

function winState(){

 	var winComb = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];

 	getCurrentState();
 	console.log(currentState);

 	for(var itr = 0; itr < winComb.length; itr++){
		result = currentState[winComb[itr][0]] + currentState[winComb[itr][1]] + currentState[winComb[itr][2]];
	

		if(result==3 || result == -3){
				turn = 1;
				winAnim(winComb[itr], result)
				
		}  else {

		result = 0;

		}
	}


}



function winAnim(sequence, result){
	if(mark!=undefined){
		playAgain();
	}
	turn = 1;
	mark = undefined;
	pcMark = undefined;
	if(result == -3){
		var color = "#D84797"
	} else {
		var color = "#3ABEFF"
	}

	for(var itr = 0; itr<sequence.length; itr++){
		var div = $("." + sequence[itr]);
		div.css("background-color", color);
	}



}//END winAnim();

function pcMove(){

	var currentEmptyDivs = [];

	getCurrentState();


	for(var itr = 0; itr<currentState.length; itr++){
		if(currentState[itr]==0){
			currentEmptyDivs.push(itr);
		}

	}
	var randomPick = Math.floor(Math.random()*(currentEmptyDivs.length));
	var pcPick = currentEmptyDivs[randomPick]; 
	var div = $("." + pcPick);
	div.html(pcMark);
	winState();
	checkDraw();
	turn = 0;

}//end pcMove();

function checkDraw(){
	getCurrentState();
	if(currentState.indexOf(0)==-1&&mark!=undefined){
		playAgain();
	}
	
}


function playAgain(){

	setTimeout(function(){
		$(".fa").fadeOut();
		$(".tile").css("background-color","white");
	}, 1500);

setTimeout(function(){

	$(".play").remove();
	for(var itr = 0; itr<9; itr++){
			var div = $("." + itr);
			div.empty();
	}

 
	if(pcIsX){
		pcMark = times;
		mark = o;
		turn = 1;
		setTimeout(function(){
			pcMove();
		}, 500)
		currentState = [];
	} 
	if(pcIsX==false){
		pcMark = o;
		mark = times;
		turn = 0;
		currentState = [];
	}
	}, 1600);


}



})//END-------------------



